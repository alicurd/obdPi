{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nObdPi is a Python 2.7 project designed for the Raspberry Pi to output a vehicle's OBD-II data to a 16x2 character OLED display.\n\n\nInstallation\n\n\nTo get the latest project files for obdPi:\n\n\ngit clone https://github.com/bendrick92/obdPi.git\n\n\n\n\nOr download the latest .zip \nhere\n.\n\n\nThe latest release notes are always available \nhere\n.\n\n\nDependencies\n\n\n\n\nPython 2.7\n\n\nPIP\n - Management of Python packages\n\n\npython-OBD\n - OBD-II serial module for reading engine data\n\n\nRPi-GPIO\n - Control Raspberry Pi GPIO channels\n\n\npyserial\n - Python serial port access library\n\n\n\n\nSetup\n\n\nUse of the obdPi scripts requires a number of configuration steps, detailed instructions for each of which can be found \nhere\n.\n\n\nUsage\n\n\nIf you follow the aforementioned \nSetup\n steps, the obdPi script(s) should be set to execute upon startup of your Raspberry Pi.\n\n\nThese same scripts can also be manually executed.  If you have followed the steps to configure your external display, you can execute the \nmain_oled.py\n via:\n\n\npython main_oled.py\n\n\n\n\nIf not, you can still use \nmain_print.py\n to output to the terminal via:\n\n\npython main_print.py", 
            "title": "Overview"
        }, 
        {
            "location": "/#introduction", 
            "text": "ObdPi is a Python 2.7 project designed for the Raspberry Pi to output a vehicle's OBD-II data to a 16x2 character OLED display.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#installation", 
            "text": "To get the latest project files for obdPi:  git clone https://github.com/bendrick92/obdPi.git  Or download the latest .zip  here .  The latest release notes are always available  here .", 
            "title": "Installation"
        }, 
        {
            "location": "/#dependencies", 
            "text": "Python 2.7  PIP  - Management of Python packages  python-OBD  - OBD-II serial module for reading engine data  RPi-GPIO  - Control Raspberry Pi GPIO channels  pyserial  - Python serial port access library", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#setup", 
            "text": "Use of the obdPi scripts requires a number of configuration steps, detailed instructions for each of which can be found  here .", 
            "title": "Setup"
        }, 
        {
            "location": "/#usage", 
            "text": "If you follow the aforementioned  Setup  steps, the obdPi script(s) should be set to execute upon startup of your Raspberry Pi.  These same scripts can also be manually executed.  If you have followed the steps to configure your external display, you can execute the  main_oled.py  via:  python main_oled.py  If not, you can still use  main_print.py  to output to the terminal via:  python main_print.py", 
            "title": "Usage"
        }, 
        {
            "location": "/setup/", 
            "text": "Raspbian Setup\n\n\nFirst, make sure your package lists are up-to-date:\n\n\nsudo apt-get update\n\n\n\n\nConfirm that Python is installed (should be included by default in your Raspbian installation):\n\n\npython --version\n\n\n\n\nInstall Python setuptools to get PIP (the Python package manager):\n\n\nsudo apt-get -y install python-pip\n\n\n\n\nInstall the python-OBD library via PIP:\n\n\nsudo pip install obd\n\n\n\n\nInstall the RPi-GPIO library via PIP:\n\n\nsudo pip install RPi.GPIO\n\n\n\n\nInstall the pyserial library:\n\n\nsudo apt-get install python-serial\n\n\n\n\nNext, enable auto-login to the 'pi' user (or whichever user you choose to run the scripts under):\n\n\nsudo nano /etc/systemd/system/getty.target.wants/getty@tty1.service\n\n\n\n\nChange the \nExecStart\n line to:\n\n\nExecStart=-/sbin/agetty -a pi %I $TERM\n\n\n\n\n\n\nDaemon Setup\n\n\nNOTE: This tutorial assumes you are using the latest release of Raspbian Jessie.  Information on daemon configuration in Jessie can be found \nhere\n.\n\n\nTo have the obdPi scripts start on boot, you'll need to setup a daemon to execute the Python script for you.\n\n\nFirst, create a new service script for the daemon:\n\n\nsudo nano /lib/systemd/system/obdpi.service\n\n\n\n\nFor OLED applications, enter the following content in your new script:\n\n\n[Unit]\nDescription=obdPi Service (OLED)\nAfter=multi-user.target\n[Service]\nType=idle\nExecStart=/usr/bin/python /path/to/scripts/main_oled.py\n[Install]\nWantedBy=multi-user.target\n\n\n\n\nOr for non-OLED applications:\n\n\n[Unit]\nDescription=obdPi Service (Print)\nAfter=multi-user.target\n[Service]\nType=idle\nExecStart=/usr/bin/python /path/to/scripts/main_print.py\n[Install]\nWantedBy=multi-user.target\n\n\n\n\nEnable the daemon script:\n\n\nsudo chmod 644 /lib/systemd/system/obdpi.service\nsudo systemctl daemon-reload\nsudo systemctl enable obdpi.service\n\n\n\n\nThen reboot:\n\n\nsudo reboot\n\n\n\n\nAfter rebooting, confirm that the service is running:\n\n\nsudo systemctl status obdpi.service\n\n\n\n\nTo stop the service:\n\n\nsudo systemctl stop obdpi.service\n\n\n\n\nAnd to disable the service (prevent it from starting at boot):\n\n\nsudo systemctl disable obdpi.service\n\n\n\n\n\n\nBluetooth Setup\n\n\nTo setup the Bluetooth connection between your Raspberry Pi and the OBD-II interface, first ensure the Bluetooth USB adapter is plugged into your Pi and the Bluetooth OBD-II adapter is installed in the vehicle's OBD-II port (and that both are within range of each other).\n\n\nNext, install the basic Bluetooth utilities for Raspbian:\n\n\nsudo apt-get install --no-install-recommends bluetooth\n\n\n\n\nWhen the install is complete, make sure the Bluetooth service is running:\n\n\nsudo service bluetooth status\n\n\n\n\nNext, to configure the Bluetooth connection:\n\n\nsudo bluetoothctl\nagent on\ndefault-agent\npairable on\nscan on\n\n\n\n\nThe identifier for your Bluetooth OBD-II adapter should appear - be sure to take note of it. (AA:BB:CC:11:22:33 will be used as an example below).\n\n\nscan off\npair AA:BB:CC:11:22:33\n\n\n\n\nAt this point, you may be prompted to enter an authentication pin.  Most adapters use, 0000, 1234 or require no pin (just press 'Enter').  Other adapters may require a specific pin, which would have been included on a slip with the adapter.\n\n\nconnect AA:BB:CC:11:22;33\nquit\n\n\n\n\nThe Bluetooth connection should now be ready for use!\n\n\n\n\nSerial Connection\n\n\nOnce the Bluetooth connection has been configured, you'll need to bind it to a serial port.  Doing so allows you to communicate with the Bluetooth OBD-II adapter in Python.\n\n\nOne time configuration of the serial connection can be done with the following:\n\n\nsudo rfcomm release all\nsudo rfcomm bind 0 AA:BB:CC:11:22:33\n\n\n\n\nTo configure the serial connection at each boot (recommeded), simply add the aforementioned code before the end of the \n/etc/rc.local\n:\n\n\nsudo nano /etc/rc.local\n\n\n\n\n\n\nDisplay Wiring\n\n\nUtilization of the \nmain_oled.py\n script requires a 16x2 character OLED display, as well as the assembly of a custom 40-pin to 16-pin cable.  A step-by-step guide for creating this cable can be found \nhere\n.", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#raspbian-setup", 
            "text": "First, make sure your package lists are up-to-date:  sudo apt-get update  Confirm that Python is installed (should be included by default in your Raspbian installation):  python --version  Install Python setuptools to get PIP (the Python package manager):  sudo apt-get -y install python-pip  Install the python-OBD library via PIP:  sudo pip install obd  Install the RPi-GPIO library via PIP:  sudo pip install RPi.GPIO  Install the pyserial library:  sudo apt-get install python-serial  Next, enable auto-login to the 'pi' user (or whichever user you choose to run the scripts under):  sudo nano /etc/systemd/system/getty.target.wants/getty@tty1.service  Change the  ExecStart  line to:  ExecStart=-/sbin/agetty -a pi %I $TERM", 
            "title": "Raspbian Setup"
        }, 
        {
            "location": "/setup/#daemon-setup", 
            "text": "NOTE: This tutorial assumes you are using the latest release of Raspbian Jessie.  Information on daemon configuration in Jessie can be found  here .  To have the obdPi scripts start on boot, you'll need to setup a daemon to execute the Python script for you.  First, create a new service script for the daemon:  sudo nano /lib/systemd/system/obdpi.service  For OLED applications, enter the following content in your new script:  [Unit]\nDescription=obdPi Service (OLED)\nAfter=multi-user.target\n[Service]\nType=idle\nExecStart=/usr/bin/python /path/to/scripts/main_oled.py\n[Install]\nWantedBy=multi-user.target  Or for non-OLED applications:  [Unit]\nDescription=obdPi Service (Print)\nAfter=multi-user.target\n[Service]\nType=idle\nExecStart=/usr/bin/python /path/to/scripts/main_print.py\n[Install]\nWantedBy=multi-user.target  Enable the daemon script:  sudo chmod 644 /lib/systemd/system/obdpi.service\nsudo systemctl daemon-reload\nsudo systemctl enable obdpi.service  Then reboot:  sudo reboot  After rebooting, confirm that the service is running:  sudo systemctl status obdpi.service  To stop the service:  sudo systemctl stop obdpi.service  And to disable the service (prevent it from starting at boot):  sudo systemctl disable obdpi.service", 
            "title": "Daemon Setup"
        }, 
        {
            "location": "/setup/#bluetooth-setup", 
            "text": "To setup the Bluetooth connection between your Raspberry Pi and the OBD-II interface, first ensure the Bluetooth USB adapter is plugged into your Pi and the Bluetooth OBD-II adapter is installed in the vehicle's OBD-II port (and that both are within range of each other).  Next, install the basic Bluetooth utilities for Raspbian:  sudo apt-get install --no-install-recommends bluetooth  When the install is complete, make sure the Bluetooth service is running:  sudo service bluetooth status  Next, to configure the Bluetooth connection:  sudo bluetoothctl\nagent on\ndefault-agent\npairable on\nscan on  The identifier for your Bluetooth OBD-II adapter should appear - be sure to take note of it. (AA:BB:CC:11:22:33 will be used as an example below).  scan off\npair AA:BB:CC:11:22:33  At this point, you may be prompted to enter an authentication pin.  Most adapters use, 0000, 1234 or require no pin (just press 'Enter').  Other adapters may require a specific pin, which would have been included on a slip with the adapter.  connect AA:BB:CC:11:22;33\nquit  The Bluetooth connection should now be ready for use!", 
            "title": "Bluetooth Setup"
        }, 
        {
            "location": "/setup/#serial-connection", 
            "text": "Once the Bluetooth connection has been configured, you'll need to bind it to a serial port.  Doing so allows you to communicate with the Bluetooth OBD-II adapter in Python.  One time configuration of the serial connection can be done with the following:  sudo rfcomm release all\nsudo rfcomm bind 0 AA:BB:CC:11:22:33  To configure the serial connection at each boot (recommeded), simply add the aforementioned code before the end of the  /etc/rc.local :  sudo nano /etc/rc.local", 
            "title": "Serial Connection"
        }, 
        {
            "location": "/setup/#display-wiring", 
            "text": "Utilization of the  main_oled.py  script requires a 16x2 character OLED display, as well as the assembly of a custom 40-pin to 16-pin cable.  A step-by-step guide for creating this cable can be found  here .", 
            "title": "Display Wiring"
        }, 
        {
            "location": "/wiring/", 
            "text": "Wiring Summary\n\n\nTo connect a 16x2 character display to your Raspberry Pi's GPIO ports, you'll need to assemble a custom 40-pin to 16-pin cable.  Listed below are the supplies and steps necessary to create your own.\n\n\nHardware\n\n\nThe hardware necessary to assemble the 40-pin to 16-pin harness is as follows:\n\n\n\n\n9 lengths of ~22 AWG female-to-female hook-up wire\n\n\nOption A: Pre-crimped wire \nlink\n\n\nOption B: 22 AWG wire \nlink\n and 0.1\" female crimp pins \nlink\n\n\n\n\n\n\n1 1x16 pin crimp connector housing \nlink\n\n\n1 2x20 pin crimp connector housing \nlink\n\n\n\n\nCutting, Stripping, and Crimping the Wire\n\n\nNOTE: If you purchased the pre-crimped wire, you can skip this first step and jump straight to \nAssembling the Connectors\n.\n\n\nFirst, gather the tools you'll need to cut, strip, and crimp the wires for your harness:\n\n\n\n\nYou'll first want to determine what length of cable you need, and cut your wires to length.  I chose to make mine about 6' long.  Measure and cut 9 separate lengths of wire.\n\n\nOnce you have your wires cut to roughly the same length, you'll need to strip the ends in preparation for crimping the pins on.\n\n\nNOTE: I recommend only doing one end of each wire to start with, as it's unlikely you cut all of the wires to identical lengths, and will most likely need to make some adjustments before assembling everything.\n\n\nRemove approximately 1/4\" of insulation, being careful to not cut any of the core strands.\n\n\n\n\nNow for crimping on the female pins.  This can be tricky, so I recommend experimenting on a couple lengths of spare wire first.\n\n\nUsing a wire cutter, trim a single pin off the bunch like so:\n\n\n\n\nEventually we'll remove the extra material, but not breaking it off right away gives you more control when attempting to crimp the cable into the pin, so let's leave it for now.\n\n\nNext, take the stripped end of a single wire and place it in the pin, making sure some length of insulated wire is inserted, but that the strand(s) of wire themselves aren't pushing into the connector side of the pin.\n\n\n\n\n\n\nIf you have too much wire or insulation, trim/strip the wire respectively until you end up with something like this:\n\n\n\n\nAt this point, you're ready to crimp!  Carefully place the positioned wire and pin into the appropriate tooth on your crimper.  Then, being sure your fingers are out of the way, use your crimper to secure the wire to the pin permanently.\n\n\n\n\n\n\nDouble check your work and make sure the wire is making \nsolid\n contact with the pin itself.\n\n\n\n\nIf everything looks good, you can trim or break off the excess pin molding and move on to the other wires!\n\n\n\n\nNOTE: You have the option of adding some additional security to your wire/pin connection by soldering the connection as well.\n\n\nAssembling the Connectors\n\n\nOnce you have your wires and pins crimped, you're ready to join them to the connector housings.\n\n\nThe Raspberry Pi-side of the cable will use the 2x20 connector housing, and the display-side will use the 1x16 connector housing.\n\n\nDetermining which wires should be inserted into which connector slots can be done using the following diagrams and table:\n\n\n\n\n\n\n\n\n\n\nPi GPIO\n\n\nOLED\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2\n\n\n\n\n\n\n6\n\n\n1\n\n\n\n\n\n\n11\n\n\n6\n\n\n\n\n\n\n12\n\n\n12\n\n\n\n\n\n\n16\n\n\n14\n\n\n\n\n\n\n18\n\n\n13\n\n\n\n\n\n\n20\n\n\n5\n\n\n\n\n\n\n22\n\n\n11\n\n\n\n\n\n\n37\n\n\n4\n\n\n\n\n\n\n\n\nNOTE: When inserting the wires into the housing, be sure to push until you hear an audible 'click'.  You can also check that the pin has passed the housing slot's retaining arm.\n\n\nCORRECT:\n\n\n\nINCORRECT:\n\n\n\nOnce you have all of your wires inserted, be sure to tug on each to ensure a secure connection.\n\n\nWith everything set and secure, congratulations!  Your new 40-pin to 16-pin harness is ready to use!", 
            "title": "Wiring"
        }, 
        {
            "location": "/wiring/#wiring-summary", 
            "text": "To connect a 16x2 character display to your Raspberry Pi's GPIO ports, you'll need to assemble a custom 40-pin to 16-pin cable.  Listed below are the supplies and steps necessary to create your own.", 
            "title": "Wiring Summary"
        }, 
        {
            "location": "/wiring/#hardware", 
            "text": "The hardware necessary to assemble the 40-pin to 16-pin harness is as follows:   9 lengths of ~22 AWG female-to-female hook-up wire  Option A: Pre-crimped wire  link  Option B: 22 AWG wire  link  and 0.1\" female crimp pins  link    1 1x16 pin crimp connector housing  link  1 2x20 pin crimp connector housing  link", 
            "title": "Hardware"
        }, 
        {
            "location": "/wiring/#cutting-stripping-and-crimping-the-wire", 
            "text": "NOTE: If you purchased the pre-crimped wire, you can skip this first step and jump straight to  Assembling the Connectors .  First, gather the tools you'll need to cut, strip, and crimp the wires for your harness:   You'll first want to determine what length of cable you need, and cut your wires to length.  I chose to make mine about 6' long.  Measure and cut 9 separate lengths of wire.  Once you have your wires cut to roughly the same length, you'll need to strip the ends in preparation for crimping the pins on.  NOTE: I recommend only doing one end of each wire to start with, as it's unlikely you cut all of the wires to identical lengths, and will most likely need to make some adjustments before assembling everything.  Remove approximately 1/4\" of insulation, being careful to not cut any of the core strands.   Now for crimping on the female pins.  This can be tricky, so I recommend experimenting on a couple lengths of spare wire first.  Using a wire cutter, trim a single pin off the bunch like so:   Eventually we'll remove the extra material, but not breaking it off right away gives you more control when attempting to crimp the cable into the pin, so let's leave it for now.  Next, take the stripped end of a single wire and place it in the pin, making sure some length of insulated wire is inserted, but that the strand(s) of wire themselves aren't pushing into the connector side of the pin.    If you have too much wire or insulation, trim/strip the wire respectively until you end up with something like this:   At this point, you're ready to crimp!  Carefully place the positioned wire and pin into the appropriate tooth on your crimper.  Then, being sure your fingers are out of the way, use your crimper to secure the wire to the pin permanently.    Double check your work and make sure the wire is making  solid  contact with the pin itself.   If everything looks good, you can trim or break off the excess pin molding and move on to the other wires!   NOTE: You have the option of adding some additional security to your wire/pin connection by soldering the connection as well.", 
            "title": "Cutting, Stripping, and Crimping the Wire"
        }, 
        {
            "location": "/wiring/#assembling-the-connectors", 
            "text": "Once you have your wires and pins crimped, you're ready to join them to the connector housings.  The Raspberry Pi-side of the cable will use the 2x20 connector housing, and the display-side will use the 1x16 connector housing.  Determining which wires should be inserted into which connector slots can be done using the following diagrams and table:      Pi GPIO  OLED      2  2    6  1    11  6    12  12    16  14    18  13    20  5    22  11    37  4     NOTE: When inserting the wires into the housing, be sure to push until you hear an audible 'click'.  You can also check that the pin has passed the housing slot's retaining arm.  CORRECT:  INCORRECT:  Once you have all of your wires inserted, be sure to tug on each to ensure a secure connection.  With everything set and secure, congratulations!  Your new 40-pin to 16-pin harness is ready to use!", 
            "title": "Assembling the Connectors"
        }
    ]
}